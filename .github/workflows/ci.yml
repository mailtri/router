name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compilation check
        run: npm run build

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true

  build:
    name: Build Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Check build artifacts
        run: |
          ls -la dist/

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: |
          # Run audit and capture results
          npm audit --audit-level=high --json > audit-results.json
          audit_exit_code=$?

          # Parse the JSON to check vulnerability counts
          high_vulns=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          critical_vulns=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          total_high_critical=$((high_vulns + critical_vulns))

          echo "Vulnerability summary:"
          cat audit-results.json | jq '.metadata.vulnerabilities'

          if [ $total_high_critical -gt 0 ]; then
            echo "❌ Found $total_high_critical high/critical severity vulnerabilities:"
            echo "High: $high_vulns, Critical: $critical_vulns"
            cat audit-results.json
            exit 1
          else
            echo "✅ No high or critical severity vulnerabilities found"
          fi

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker Compose
        run: |
          docker compose config
          echo "Docker Compose configuration is valid"

      - name: Test LocalStack startup
        run: |
          docker compose up -d localstack
          sleep 10
          curl -f http://localhost:4566/_localstack/health || exit 1
          docker compose down

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: ses,s3,lambda,sqs,iam,logs
          DEBUG: 1
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for LocalStack
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

      - name: Setup AWS CLI for LocalStack
        run: |
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test
          aws configure set default.region us-east-1
          aws configure set default.output json

      - name: Create S3 bucket
        run: aws --endpoint-url=http://localhost:4566 s3 mb s3://mailtri-emails-test

      - name: Create SQS queue
        run: aws --endpoint-url=http://localhost:4566 sqs create-queue --queue-name mailtri-processed-emails-test

      - name: Run integration tests
        run: npm run test:ci
        env:
          LOCALSTACK_ENDPOINT: http://localhost:4566
          S3_BUCKET: mailtri-emails-test
          SQS_QUEUE_URL: http://localhost:4566/000000000000/mailtri-processed-emails-test
