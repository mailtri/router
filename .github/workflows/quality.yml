name: Code Quality

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript compilation
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit

      - name: Check test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: quality
          name: codecov-quality
          fail_ci_if_error: false
        continue-on-error: true

      - name: Comment PR with quality report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            let coverageData = null;
            let coverageComment = '';
            
            // Check if coverage file exists
            const coveragePath = './coverage/coverage-summary.json';
            if (fs.existsSync(coveragePath)) {
              try {
                coverageData = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverageData.total;
                
                coverageComment = `### Test Coverage
                - **Statements**: ${total.statements.pct}%
                - **Branches**: ${total.branches.pct}%
                - **Functions**: ${total.functions.pct}%
                - **Lines**: ${total.lines.pct}%
                
                ### Quality Score: ${Math.round((total.statements.pct + total.branches.pct + total.functions.pct + total.lines.pct) / 4)}/100`;
              } catch (error) {
                console.log('Error parsing coverage data:', error);
                coverageComment = '### Test Coverage: Data not available';
              }
            } else {
              coverageComment = '### Test Coverage: No coverage data generated';
            }

            const comment = `## ðŸ“Š Code Quality Report

            ${coverageComment}

            ### Checks Passed âœ…
            - ESLint: No linting errors
            - TypeScript: Compilation successful
            - Unit Tests: All tests passing
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
